<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/maven-v4_0_0.xsd">

    <modelVersion>4.0.0</modelVersion>

    <parent>
        <groupId>fr.sirs</groupId>
        <artifactId>sirs</artifactId>
        <version>2.4</version>
    </parent>

    <groupId>fr.sirs</groupId>
    <artifactId>launcher</artifactId>
    <packaging>jar</packaging>
    <name>SIRS2 Launcher</name>
    <description>Launcher</description>
    
    <!-- TODO activate back for license agreement support before 
    installation. Deactivated because it does not work well for .deb packages.
    <profiles>
        
        <profile>
            <activation>
                <activeByDefault>true</activeByDefault>
            </activation>
            <properties>
                <additional.resources>src/main/deploy/additional/unix</additional.resources>
            </properties>
        </profile>
        
        <profile>
            <id>Windows deployment</id>
            <activation>
                <os>
                    <family>
                        Windows
                    </family>
                </os>
            </activation>
            <properties>
                <additional.resources>src/main/deploy/additional/win</additional.resources>
            </properties>
        </profile>
    </profiles-->
    
    <dependencies>
        <dependency>
            <groupId>fr.sirs</groupId>
            <artifactId>desktop</artifactId>
            <version>${project.version}</version>
            <type>jar</type>
        </dependency>
    </dependencies>
    
    <build>
        <!-- Override final name for jfx:native command to create a friendly-named package -->
	<finalName>SIRS2</finalName>
        <plugins>
            <plugin>
                <artifactId>maven-compiler-plugin</artifactId>
                <configuration>
                    <source>1.8</source>
                    <target>1.8</target>
                    <debug>true</debug>
                </configuration>
            </plugin>
            
            <plugin>
                <groupId>com.zenjava</groupId>
                <artifactId>javafx-maven-plugin</artifactId>
                <configuration>
                    <additionalAppResources>
                        ${additional.resources}
                    </additionalAppResources>
                    <nativeReleaseVersion>${project.version}</nativeReleaseVersion>
                    <mainClass>fr.sirs.launcher.Launcher</mainClass>
                    <needMenu>true</needMenu>
                    <jvmArgs>
                        <!-- Force GC. G1 can factorize string instances to save
                        some memory, which can be useful in a restrained environment as this one. -->
                        <jvmArg>-XX:+UseG1GC</jvmArg>
                        <jvmArg>-XX:+UseStringDeduplication</jvmArg>
                        <!-- Memory management. Application cannot run with less 
                        than 256MB heap, so we forbid its use when this requirement
                        cannot be fulfilled. Another important point is that multiple 
                        end users work on Win7-32bits system, so they need memory saving.
                        As application performance is not affected when running with 
                        512MB, we define it as maximal heap amount. -->
                        <jvmArg>-Xms256m</jvmArg>
                        <jvmArg>-Xmx512m</jvmArg>
                        <!-- We de-activate JIT compilation to reduce code cache / class space. -->
                        <jvmArg>-XX:-TieredCompilation</jvmArg>
                        <jvmArg>-Xmixed</jvmArg>
                        <!-- Force GC before any attempt to increase metaspace size. -->
                        <jvmArg>-XX:MaxMetaspaceExpansion=0</jvmArg>
                        <!-- Well, Not sure this is useful, but using for some time didn't appear to hurt. -->
                        <jvmArg>-XX:+AggressiveOpts</jvmArg>
                        <!-- Reduce thread space. This is important, as ES is popping a real swarm of threads. -->
                        <jvmArg>-Xss256k</jvmArg>
                        <!-- We delegate proxy detection to Java (Note : Use of Proxy-vole 
                        library should make this parameter obsolete, but we keep it active, 
                        in case proxy-vole is not sufficient). -->
                        <jvmArg>-Djava.net.useSystemProxies=true</jvmArg>
                        <!-- We define a custom system class loader which will scan and load available modules. -->
                        <jvmArg>-Djava.system.class.loader=fr.sirs.core.plugins.PluginLoader</jvmArg>
                        <!-- Force encoding to ensure IO with CouchDB won't encounter any deformation, whatever the OS. -->
                        <jvmArg>-Dfile.encoding=UTF-8</jvmArg>
                    </jvmArgs>
                    <!-- TODO activate back for license agreement support before 
                    installation. Deactivated because it does not work well for .deb packages.
                    <bundleArguments>
                        <copyright>Copyright (C) 2016, France digues</copyright>
                        <licenseFile>CLUF</licenseFile>
                    </bundleArguments-->
                </configuration>
            </plugin>
        </plugins>
    </build>
    
</project>